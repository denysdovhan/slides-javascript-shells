{
  "_args": [
    [
      {
        "raw": "mdast-react@git://github.com/jjt/mdast-react.git#2ea3bcd",
        "scope": null,
        "escapedName": "mdast-react",
        "name": "mdast-react",
        "rawSpec": "git://github.com/jjt/mdast-react.git#2ea3bcd",
        "spec": "git://github.com/jjt/mdast-react.git#2ea3bcd",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:jjt/mdast-react.git#2ea3bcd",
          "sshUrl": "git+ssh://git@github.com/jjt/mdast-react.git#2ea3bcd",
          "httpsUrl": "git+https://github.com/jjt/mdast-react.git#2ea3bcd",
          "gitUrl": "git://github.com/jjt/mdast-react.git#2ea3bcd",
          "shortcut": "github:jjt/mdast-react#2ea3bcd",
          "directUrl": "https://raw.githubusercontent.com/jjt/mdast-react/2ea3bcd/package.json"
        }
      },
      "/home/travis/build/denysdovhan/slides-javascript-shells/node_modules/spectacle"
    ]
  ],
  "_from": "git://github.com/jjt/mdast-react.git#2ea3bcd",
  "_id": "mdast-react@0.3.0",
  "_inCache": true,
  "_location": "/mdast-react",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mdast-react@git://github.com/jjt/mdast-react.git#2ea3bcd",
    "scope": null,
    "escapedName": "mdast-react",
    "name": "mdast-react",
    "rawSpec": "git://github.com/jjt/mdast-react.git#2ea3bcd",
    "spec": "git://github.com/jjt/mdast-react.git#2ea3bcd",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:jjt/mdast-react.git#2ea3bcd",
      "sshUrl": "git+ssh://git@github.com/jjt/mdast-react.git#2ea3bcd",
      "httpsUrl": "git+https://github.com/jjt/mdast-react.git#2ea3bcd",
      "gitUrl": "git://github.com/jjt/mdast-react.git#2ea3bcd",
      "shortcut": "github:jjt/mdast-react#2ea3bcd",
      "directUrl": "https://raw.githubusercontent.com/jjt/mdast-react/2ea3bcd/package.json"
    }
  },
  "_requiredBy": [
    "/spectacle"
  ],
  "_resolved": "git://github.com/jjt/mdast-react.git#2ea3bcdb3ea04e00eecb8b275ba5ad7031d67a4f",
  "_shasum": "8bf1d615e61273b98aea626339d9ab6eeb45f1f9",
  "_shrinkwrap": null,
  "_spec": "mdast-react@git://github.com/jjt/mdast-react.git#2ea3bcd",
  "_where": "/home/travis/build/denysdovhan/slides-javascript-shells/node_modules/spectacle",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mapbox/mdast-react/issues"
  },
  "dependencies": {
    "repeat-string": "^1.5.2"
  },
  "description": "Compile Markdown to React with mdast",
  "devDependencies": {
    "browserify": "^11.2.0",
    "commonmark.json": "^0.21.0",
    "eslint": "^1.6.0",
    "esmangle": "^1.0.0",
    "istanbul": "^0.3.0",
    "jscs": "^2.3.0",
    "jscs-jsdoc": "^1.0.0",
    "mdast": "^1.0.0",
    "mdast-comment-config": "^1.0.0",
    "mdast-github": "^1.0.0",
    "mdast-lint": "^1.1.1",
    "mdast-toc": "^1.1.0",
    "mdast-yaml-config": "^1.0.0",
    "mocha": "^2.0.0",
    "vfile": "^1.1.0"
  },
  "files": [
    "index.js",
    "lib/",
    "LICENSE"
  ],
  "gitHead": "2ea3bcdb3ea04e00eecb8b275ba5ad7031d67a4f",
  "homepage": "https://github.com/mapbox/mdast-react#readme",
  "keywords": [
    "compile",
    "html",
    "markdown",
    "mdast",
    "stringify"
  ],
  "license": "MIT",
  "name": "mdast-react",
  "optionalDependencies": {},
  "peerDependencies": {
    "mdast": ">=0.25.0"
  },
  "readme": "# mdast-react\n\n[![Build Status](https://travis-ci.org/mapbox/mdast-react.svg?branch=master)](https://travis-ci.org/mapbox/mdast-react)\n\n**mdast-react** compiles markdown to React.  Built on [**mdast**](https://github.com/wooorm/mdast),\nan extensively tested and pluggable parser.\n\n**Why?** Using innerHTML and [dangerouslySetInnerHTML](https://facebook.github.io/react/tips/dangerously-set-inner-html.html) in\n[React.js](http://facebook.github.io/react/) is a common cause of [XSS](https://en.wikipedia.org/wiki/Cross-site_scripting)\nattacks: user input can include script tags and other kinds of active\ncontent that reaches across domains and harms security. mdast-react\nbuilds a DOM in React, using [React.createElement](https://facebook.github.io/react/docs/top-level-api.html):\nthis means that you can display parsed & formatted Markdown content\nin an application without using `dangerouslySetInnerHTML`.\n\n## Installation\n\n[npm](https://docs.npmjs.com/cli/install):\n\n```bash\nnpm install mdast-react\n```\n\n## Table of Contents\n\n*   [Command line](#command-line)\n\n*   [Programmatic](#programmatic)\n\n    *   [mdast.use(react, options)](#mdastusereact-options)\n\n*   [Configuration](#configuration)\n\n*   [CommonMark](#commonmark)\n\n*   [Integrations](#integrations)\n\n*   [License](#license)\n\n## Programmatic\n\n### [mdast](https://github.com/wooorm/mdast#api).[use](https://github.com/wooorm/mdast#mdastuseplugin-options)(react, [options](#configuration))\n\n**Parameters**\n\n*   `react` — This plugin;\n*   `options` (`Object?`) — See [below](#configuration).\n\nLet’s say `example.js` looks as follows:\n\n```js\nvar React = require('react'),\n    mdast = require('mdast'),\n    reactRenderer = require('mdast-react');\n\nvar App = React.createClass({\n    getInitialState() {\n        return { text: '# hello world' };\n    },\n    onChange(e) {\n        this.setState({ text: e.target.value });\n    },\n    render() {\n        return (<div>\n            <textarea\n                value={this.state.text}\n                onChange={this.onChange} />\n            <div id='preview'>\n                {mdast().use(reactRenderer).process(this.state.text)}\n            </div>\n        </div>);\n    }\n});\n\nReact.render(<App />, document.getElementById('app'));\n```\n\n## Configuration\n\nAll options, including the `options` object itself, are optional:\n\n*   `entities` (`true`, `'numbers'`, or `'escape'`, default: `true`)\n    — How to encode non-ASCII and HTML-escape characters: the default\n    generates named entities (`&` > `&amp;`); `'numbers'` generates\n    numbered entities (`&` > `&#x26;`), and `'escape'` only encodes\n    characters which are required by HTML to be escaped: `&`, `<`, `>`,\n    `\"`, `'`, and `` ` ``, leaving non-ASCII characters untouched.\n\n*   `sanitize` (`boolean`, default: `false`)\n    — Whether or not to allow the use of HTML inside markdown.\n\n*   `paragraphBlockquotes` (`boolean`, default: `true`)\n    — Wraps content of `<blockquote>` in a `<p>` element.\n\n*   `mdastReactComponents` (`object`, default: `undefined`)\n    — Provides a way to override default elements (`<a>`, `<p>`, etc)\n    by defining an object comprised of `element: Component` key-value\n    pairs. For example, to output `<MyLink>` components instead of\n    `<a>`, and `<MyParagraph>` instead of `<p>`:\n    ```js\n    mdastReactComponents: {\n      a: MyLink,\n      p: MyParagraph\n    }\n    ```\n\nThese can passed to `mdast.use()` as a second argument.\n\nOptions other than `mdastReactComponents` can be defined in `.mdastrc` or `package.json` [files](https://github.com/wooorm/mdast/blob/master/doc/mdastrc.5.md)\ntoo. An example `.mdastrc` file could look as follows:\n\n```json\n{\n  \"plugins\": {\n    \"react\": {\n        \"sanitize\": false,\n        \"xhtml\": false,\n        \"entities\": \"numbers\"\n    }\n  },\n  \"settings\": {\n    \"commonmark\": true\n  }\n}\n```\n\nWhere the object at `plugins.react` are the options for **mdast-react**.\nThe object at `settings` determines how **mdast** parses markdown code.\nRead more about the latter on [**mdast**’s readme](https://github.com/wooorm/mdast#mdastprocessvalue-options-done).\n\n## CommonMark\n\n> You still need to set `commonmark: true` in\n> [**mdast**’s options](https://github.com/wooorm/mdast#mdastprocessvalue-options-done)\n\n[CommonMark](http://commonmark.org) support is a goal but not (yet) a\nnecessity. There are some (roughly 115 of 550, relating to inline\nprecedence, lists, emphasis and strongness) issues which I’d like\nto cover in the future. Note that this sounds like a lot, but they\nhave to do with obscure differences which do not often occur in the\nreal world. Read more on some of the reasoning in\n[`doc/commonmark.md`](doc/commonmark.md).\n\n## Integrations\n\n**mdast-react** works great with:\n\n*   [**mdast-toc**](https://github.com/wooorm/mdast-toc), which generates\n    tables of contents;\n\n*   [**mdast-github**](https://github.com/wooorm/mdast-github), which generates\n    references to GitHub issues, PRs, users, and more;\n\n*   [**mdast-comment-config**](https://github.com/wooorm/mdast-comment-config)\n    and [**mdast-yaml-config**](https://github.com/wooorm/mdast-yaml-config),\n    which specify how HTML is compiled in the document itself;\n\n*   ...and [more](https://github.com/wooorm/mdast/blob/master/doc/plugins.md#list-of-plugins).\n\nAll [**mdast** nodes](https://github.com/wooorm/mdast/blob/master/doc/nodes.md)\ncan be compiled to HTML.  In addition, **mdast-react** looks for an\n`attributes` object on each node it compiles and adds the found properties\nas HTML attributes on the compiled tag.\n\n## License\n\n[MIT](LICENSE) © [Titus Wormer](http://wooorm.com), modified by [Tom MacWright](http://www.macwright.org/) and [Mapbox](https://www.mapbox.com/)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mapbox/mdast-react.git"
  },
  "scripts": {
    "build-md": "mdast . --output --quiet",
    "lint": "npm run lint-api && npm run lint-style",
    "lint-api": "eslint .",
    "lint-style": "jscs --reporter inline .",
    "make": "npm run lint && npm run test-coverage",
    "sub-install": "cd test/react/v0.13 && npm install && cd ../v0.14 && npm install && cd ../..",
    "test": "npm run sub-install && npm run test-api",
    "test-api": "mocha --check-leaks test/index.js",
    "test-coverage": "istanbul cover _mocha -- --check-leaks test/index.js",
    "test-coveralls": "istanbul cover _mocha --report lcovonly -- --check-leaks test/index.js",
    "test-travis": "npm run sub-install && npm run test-coveralls"
  },
  "version": "0.3.0"
}
