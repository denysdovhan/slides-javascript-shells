.TH "MDASTPLUGIN" "3" "December 2015" "2.3.2" "mdast manual"
.SH "NAME"
\fBmdastplugin\fR - mdast plug-in creation
.SH "SYNOPSIS"
.P
.RS 2
.nf
\[sl]**
 * Change a file-extension to \[ga]\[aq]html\[aq]\[ga].
 *\[sl]
function transformer(ast, file) \[lC]
    file.move(\[lC]
        \[aq]extension\[aq]: \[aq]html\[aq]
    \[rC]);
\[rC]

\[sl]**
 * Expose.
 * This plugin can be used as \[ga]mdast.use(plugin)\[ga].
 *\[sl]
module.exports \[eq] function () \[lC]
    return transformer;
\[rC];
.fi
.RE
.SH "DESCRIPTION"
.P
This manual contains information on how \fBmdast\fR(3) plugins work. It focusses on how to create plugins, rather than on how to implement them. To implement plugins, see \fBmdast\fR(3) and \fBmdastplugin\fR(7).
.P
An \fBmdast\fR plugin does up to three things:
.RS 0
.IP \(bu 4
It modifies the processor: the parser, the stringifier;
.IP \(bu 4
It transforms the AST;
.IP \(bu 4
It adds new files to be processed by \fBmdast\fR(1).
.RE 0

.P
All have their own function. The first is called an \[lq]attacher\[rq] (see \fBATTACHER\fR). The second is named a \[lq]transformer\[rq] (see \fBTRANSFORMER\fR). The third is named a \[lq]completer\[rq] (see \fBCOMPLETER\fR). An \[lq]attacher\[rq] may return a \[lq]transformer\[rq] and attach a \[lq]completer\[rq].
.SH "FUNCTION ATTACHER(MDAST\[LB], OPTIONS\[RB]\[LB], FILESET\[RB])"
.P
.RS 2
.nf
\[sl]**
 * Add an extension.
 * The \[ga]processor\[ga] is the instance of mdast this attacher
 * is \[ga]use\[ga]d on.\[lC]
 * This plugin can be used as \[ga]mdast.use(plugin, \[lC]ext: \[aq]html\[aq]\[rC])\[ga].
 *\[sl]
module.exports \[eq] function (processor, options) \[lC]
    var extension \[eq] (options \[ba]\[ba] \[lC]\[rC]).ext;

    \[sl]**
     * Change a file-extension to \[ga]extension\[ga].
     *\[sl]
    function transformer(ast, file) \[lC]
        file.move(\[lC]
            \[aq]extension\[aq]: extension
        \[rC]);
    \[rC]

    return transformer;
\[rC];
.fi
.RE
.P
To modify the parser, the compiler, or access the file-set on \fBmdast\fR(1), create an attacher.
.P
An attacher is the thing passed to \fBuse()\fR. It can receive plugin specific options, but that\[cq]s entirely up to the developer. An \fBattacher\fR is invoked when the plugin is \fBuse\fRd on an \fBmdast\fR instance, and can return a \fBtransformer\fR which will be called on subsequent processes.
.P
Note that \fBmdast\fR(1) invokes \fBattacher\fR for each file, not just once.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 4
\fBtransformer? \[eq] attacher(mdast, options\[lB], fileSet\[rB])\fR.
.RE 0

.P
\fBParameters\fR
.RS 0
.IP \(bu 4
\fBmdast\fR (\fBObject\fR) \[em] Context on which the plugin was \fBuse\fRd;
.IP \(bu 4
\fBoptions\fR (\fBObject\fR, optional) \[em] Plugin specific options;
.IP \(bu 4
\fBfileSet\fR (\fBFileSet\fR, optional) \[em] Access to all files being processed by \fBmdast\fR(1). Only passed on the Command-Line. See \fBmdast\fR(3) for more information regarding file-sets.
.RE 0

.P
\fBReturns\fR
.P
\fBtransformer\fR (optional) \[em] See FUNCTION TRANSFORMER(NODE, FILE\[lB], NEXT\[rB]).
.SH "FUNCTION TRANSFORMER(NODE, FILE\[LB], NEXT\[RB])"
.P
.RS 2
.nf
var visit \[eq] require(\[aq]unist-util-visit\[aq]);

\[sl]**
 * Add a \[ga]js\[ga] language flag to code nodes when without flag.
 *\[sl]
function transformer(ast, file) \[lC]
    visit(ast, \[aq]code\[aq], function (node) \[lC]
        if (!node.lang) \[lC]
            node.lang \[eq] \[aq]js\[aq];
        \[rC]
    \[rC]);
\[rC]

\[sl]**
 * Expose.
 * This plugin can be used as \[ga]mdast.use(plugin)\[ga].
 *\[sl]
module.exports \[eq] function () \[lC]
    return transformer;
\[rC];
.fi
.RE
.P
To transform an \fBmdastnode\fR(7), create a \fBtransformer\fR. A \fBtransformer\fR is a simple function which is invoked each time a document is processed by a \fBmdast\fR processor. A transformer should transform \fBnode\fR or modify \fBfile\fR.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 4
\fBerr? \[eq] transformer(node, file, \[lB]next\[rB])\fR.
.RE 0

.P
\fBParameters\fR
.RS 0
.IP \(bu 4
\fBnode\fR (\fBNode\fR) \[em] See \fBmdastnode\fR(7);
.IP \(bu 4
\fBfile\fR (\fBVFile\fR) \[em] Virtual file;
.IP \(bu 4
\fBnext\fR (\fBfunction(err?)\fR, optional) \[em] If the signature includes \fBnode\fR, \fBfile\fR, and \fBnext\fR, \fBtransformer\fR \fBmay\fR finish asynchronous, and \fBmust\fR invoke \fBnext()\fR on completion with an optional error.
.RE 0

.P
\fBReturns\fR
.P
\fBerr\fR (\fBError\fR, optional) \[em] Exception which will be thrown.
.SH "FUNCTION COMPLETER(FILESET\[LB], NEXT\[RB])"
.P
To access all files once they are transformed, create a \fBcompleter\fR. A \fBcompleter\fR is invoked before files are compiled, written, and logged, but after reading, parsing, and transforming. Thus, a completer can still change files or add messages.
.P
\fBSignatures\fR
.RS 0
.IP \(bu 4
\fBerr? \[eq] completer(fileSet\[lB], next\[rB])\fR.
.RE 0

.P
\fBProperties\fR
.RS 0
.IP \(bu 4
\fBpluginId\fR (\fB*\fR) \[em] \fBattacher\fR is invoked for each file, so if it \fBuse\fRs \fBcompleter\fR on the file-set, it would attach multiple times. By providing \fBpluginId\fR on \fBcompleter\fR, \fBmdast\fR will ensure only one \fBcompleter\fR with that identifier is will be added.
.RE 0

.P
\fBParameters\fR
.RS 0
.IP \(bu 4
\fBfileSet\fR (\fBFileSet\fR) \[em] All files being processed by \fBmdast\fR(1);
.IP \(bu 4
\fBnext\fR (\fBfunction(err?)\fR, optional) \[em] If the signature includes \fBfileSet\fR and \fBnext\fR, \fBcompleter\fR \fBmay\fR finish asynchronous, and \fBmust\fR invoke \fBnext()\fR on completion with an optional error.
.RE 0

.P
\fBReturns\fR
.P
\fBerr\fR (\fBError\fR, optional) \[em] Exception which will be thrown.
.SH "BUGS"
.P
\fI\(lahttps:\[sl]\[sl]github.com\[sl]wooorm\[sl]mdast\[sl]issues\(ra\fR
.SH "SEE ALSO"
.P
\fBmdast\fR(1), \fBmdast\fR(3), \fBmdastplugin\fR(7), \fBmdastnode\fR(7).
.SH "AUTHOR"
.P
Written by Titus Wormer \fI\(latituswormer\[at]gmail.com\(ra\fR
